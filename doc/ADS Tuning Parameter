{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "import sys, os, re, csv, codecs, numpy as np, pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "from keras.preprocessing.text import Tokenizer\n",
    "from keras.preprocessing.sequence import pad_sequences\n",
    "from keras.layers import Dense, Input, LSTM, Embedding, Dropout, Activation\n",
    "from keras.layers import Bidirectional, GlobalMaxPool1D\n",
    "from keras.models import Model\n",
    "from keras import initializers, regularizers, constraints, optimizers, layers\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "from keras.wrappers.scikit_learn import KerasClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import time\n",
    "import traceback\n",
    "from joblib.externals.loky import set_loky_pickler\n",
    "from joblib import parallel_backend\n",
    "from joblib import Parallel, delayed\n",
    "from joblib import wrap_non_picklable_objects\n",
    "\n",
    "seed_value= 0\n",
    "\n",
    "# 1. Set `PYTHONHASHSEED` environment variable at a fixed value\n",
    "import os\n",
    "os.environ['PYTHONHASHSEED']=str(seed_value)\n",
    "\n",
    "# 2. Set `python` built-in pseudo-random generator at a fixed value\n",
    "import random\n",
    "random.seed(seed_value)\n",
    "\n",
    "# 3. Set `numpy` pseudo-random generator at a fixed value\n",
    "import numpy as np\n",
    "np.random.seed(seed_value)\n",
    "\n",
    "# 4. Set `tensorflow` pseudo-random generator at a fixed value\n",
    "import tensorflow as tf\n",
    "tf.set_random_seed(seed_value)\n",
    "\n",
    "# 5. Configure a new global `tensorflow` session\n",
    "from keras import backend as K\n",
    "session_conf = tf.ConfigProto(intra_op_parallelism_threads=1, inter_op_parallelism_threads=1)\n",
    "sess = tf.Session(graph=tf.get_default_graph(), config=session_conf)\n",
    "K.set_session(sess)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = pd.read_csv('Desktop/input/train.csv')\n",
    "test = pd.read_csv('Desktop/input/test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>comment_text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00001cee341fdb12</td>\n",
       "      <td>Yo bitch Ja Rule is more succesful then you'll...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0000247867823ef7</td>\n",
       "      <td>== From RfC == \\n\\n The title is fine as it is...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>00013b17ad220c46</td>\n",
       "      <td>\" \\n\\n == Sources == \\n\\n * Zawe Ashton on Lap...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>00017563c3f7919a</td>\n",
       "      <td>:If you have a look back at the source, the in...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>00017695ad8997eb</td>\n",
       "      <td>I don't anonymously edit articles at all.</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 id                                       comment_text\n",
       "0  00001cee341fdb12  Yo bitch Ja Rule is more succesful then you'll...\n",
       "1  0000247867823ef7  == From RfC == \\n\\n The title is fine as it is...\n",
       "2  00013b17ad220c46  \" \\n\\n == Sources == \\n\\n * Zawe Ashton on Lap...\n",
       "3  00017563c3f7919a  :If you have a look back at the source, the in...\n",
       "4  00017695ad8997eb          I don't anonymously edit articles at all."
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()\n",
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(id               False\n",
       " comment_text     False\n",
       " toxic            False\n",
       " severe_toxic     False\n",
       " obscene          False\n",
       " threat           False\n",
       " insult           False\n",
       " identity_hate    False\n",
       " dtype: bool, id              False\n",
       " comment_text    False\n",
       " dtype: bool)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isnull().any(),test.isnull().any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "list_classes = [\"toxic\", \"severe_toxic\", \"obscene\", \"threat\", \"insult\", \"identity_hate\"]\n",
    "y = train[list_classes].values\n",
    "list_sentences_train = train[\"comment_text\"]\n",
    "list_sentences_test = test[\"comment_text\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "max_features = 20000\n",
    "tokenizer = Tokenizer(num_words=max_features)\n",
    "tokenizer.fit_on_texts(list(list_sentences_train))\n",
    "list_tokenized_train = tokenizer.texts_to_sequences(list_sentences_train)\n",
    "list_tokenized_test = tokenizer.texts_to_sequences(list_sentences_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "#list_tokenized_train[:1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "maxlen = 200\n",
    "X_t = pad_sequences(list_tokenized_train, maxlen=maxlen)\n",
    "X_te = pad_sequences(list_tokenized_test, maxlen=maxlen)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "totalNumWords = [len(one_comment) for one_comment in list_tokenized_train]\n",
    "plt.hist(totalNumWords,bins = np.arange(0,410,10))#[0,50,100,150,200,250,300,350,400])#,450,500,550,600,650,700,750,800,850,900])\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "inp = Input(shape=(maxlen, )) #maxlen=200 as defined earlier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /Users/mengranxia/anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n"
     ]
    }
   ],
   "source": [
    "embed_size = 142\n",
    "x = Embedding(max_features, embed_size)(inp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = LSTM(60, return_sequences=True,name='lstm_layer')(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = GlobalMaxPool1D()(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /Users/mengranxia/anaconda3/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py:3445: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n"
     ]
    }
   ],
   "source": [
    "x = Dropout(0.1)(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = Dense(50, activation=\"relu\")(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = Dropout(0.1)(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = Dense(6, activation=\"sigmoid\")(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_model():\n",
    "    model = Model(inputs=inp, outputs=x)\n",
    "    model.compile(loss='binary_crossentropy',\n",
    "                  optimizer='adam',\n",
    "                  metrics=['accuracy'])\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = KerasClassifier(build_fn=create_model, verbose=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "batch_size = [32,128,142]\n",
    "epochs = [2]\n",
    "param_grid = dict(batch_size=batch_size, epochs=epochs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /Users/mengranxia/anaconda3/lib/python3.7/site-packages/tensorflow/python/ops/math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n",
      "WARNING:tensorflow:From /Users/mengranxia/anaconda3/lib/python3.7/site-packages/tensorflow/python/ops/math_grad.py:102: div (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Deprecated in favor of operator or tf.math.divide.\n",
      "Best: 0.995568 using {'batch_size': 128, 'epochs': 2}\n"
     ]
    }
   ],
   "source": [
    "grid = GridSearchCV(estimator=model, param_grid=param_grid,cv=5) #n_jobs=-1)；\n",
    "grid_result = grid.fit(X_t,y)\n",
    "print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_model():\n",
    "    model = Model(inputs=inp, outputs=x)\n",
    "    model.compile(loss='binary_crossentropy',\n",
    "                  optimizer=optimizer,\n",
    "                  metrics=['accuracy'])\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.wrappers.scikit_learn import KerasClassifier\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "model = KerasClassifier(build_fn=create_model, epochs=2, batch_size=128, verbose=0)\n",
    "optimizer = ['SGD', 'RMSprop', 'Adagrad', 'Adadelta', 'Adam', 'Adamax', 'Nadam']\n",
    "param_grid = dict(optimizer=optimizer)\n",
    "grid = GridSearchCV(estimator=model, param_grid=param_grid)\n",
    "grid_result = grid.fit(X_t, y)\n",
    "print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.optimizers import Adamax\n",
    "def create_model(learn_rate):\n",
    "    model = Model(inputs=inp, outputs=x)\n",
    "    optimizer = Adamax(lr=learn_rate)\n",
    "    model.compile(loss='binary_crossentropy',\n",
    "                  optimizer=optimizer,\n",
    "                  metrics=['accuracy'])\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "learn_rate = [0.001, 0.01, 0.1, 0.2, 0.3]\n",
    "param_grid = dict(learn_rate=learn_rate)\n",
    "\n",
    "model = KerasClassifier(build_fn=create_model, epochs=2, batch_size=128, verbose=0)\n",
    "grid = GridSearchCV(estimator=model, param_grid=param_grid, cv=5)\n",
    "grid_result = grid.fit(X_t, y)\n",
    "print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Model(inputs=inp, outputs=x)\n",
    "optimizer = Adamax(lr=0.2)\n",
    "model.compile(loss='binary_crossentropy',\n",
    "                  optimizer=\"Adamax\",\n",
    "                  metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 127656 samples, validate on 31915 samples\n",
      "Epoch 1/2\n",
      "127656/127656 [==============================] - 459s 4ms/step - loss: 0.1050 - acc: 0.9682 - val_loss: 0.0518 - val_acc: 0.9815\n",
      "Epoch 2/2\n",
      "127656/127656 [==============================] - 452s 4ms/step - loss: 0.0496 - acc: 0.9819 - val_loss: 0.0492 - val_acc: 0.9822\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0xb4febc0b8>"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batch_size = 142\n",
    "epochs = 2\n",
    "model.fit(X_t,y, batch_size=batch_size, epochs=epochs, validation_split=0.2)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
